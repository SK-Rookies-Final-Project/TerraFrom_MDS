---
- name: Docker 및 필수 패키지 설치
  hosts: all
  become: yes
  vars:
    docker_compose_version: "v2.29.7"
    local_docker_container_path: "../docker-container"
    remote_docker_container_path: "/home/ubuntu"
    
  tasks:
    - name: 시스템 패키지 업데이트
      apt:
        update_cache: yes
        cache_valid_time: 3600
      
    - name: 필수 패키지 설치
      apt:
        name:
          - wget
          - net-tools
          - openssh-server
          - firewalld
          - unzip
          - curl
          - git
          - apt-transport-https
          - ca-certificates
          - gnupg-agent
          - software-properties-common
        state: present
        update_cache: yes

    - name: Docker GPG 키 추가
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Docker 공식 저장소 추가
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: 패키지 캐시 업데이트
      apt:
        update_cache: yes

    - name: Docker 패키지 설치
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Docker 서비스 시작 및 활성화
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Docker Compose 다운로드
      get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
        owner: root
        group: root

    - name: Docker Compose 심볼릭 링크 생성
      file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/docker-compose
        state: link

    - name: 현재 사용자를 docker 그룹에 추가
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user is defined

    - name: 사용자별 docker 그룹 추가 (연결된 모든 사용자)
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop: "{{ ansible_all_ipv4_addresses | map('extract', hostvars) | selectattr('ansible_user', 'defined') | map(attribute='ansible_user') | list | unique }}"
      when: ansible_all_ipv4_addresses is defined
      ignore_errors: yes

    - name: 현재 SSH 사용자를 docker 그룹에 추가
      user:
        name: "{{ ansible_ssh_user | default(ansible_user) }}"
        groups: docker
        append: yes
      when: ansible_ssh_user is defined or ansible_user is defined

    - name: Docker 소켓 권한 확인 및 설정
      file:
        path: /var/run/docker.sock
        group: docker
        mode: '0664'

    - name: 원격 서버에 디렉토리 생성
      file:
        path: "{{ remote_docker_container_path }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: 로컬 docker-container 디렉토리를 원격 서버로 복사
      copy:
        src: "{{ local_docker_container_path }}/"
        dest: "{{ remote_docker_container_path }}"
        owner: ubuntu
        group: ubuntu
        mode: preserve
        directory_mode: '0755'
      become: yes

    - name: 복사된 파일들의 소유권 변경
      file:
        path: "{{ remote_docker_container_path }}"
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: 스크립트 파일들에 실행 권한 부여
      file:
        path: "{{ remote_docker_container_path }}/scripts"
        mode: '0755'
        recurse: yes
        state: directory
      ignore_errors: yes

    - name: start-all.sh 스크립트에 실행 권한 부여
      file:
        path: "{{ remote_docker_container_path }}/scripts/start-all.sh"
        mode: '0755'
      ignore_errors: yes

    - name: 기존 로그 파일 삭제 (새로운 실행을 위해)
      file:
        path: "{{ remote_docker_container_path }}/scripts/start-all.log"
        state: absent

    - name: start-all.sh 스크립트 실행
      shell: |
        cd {{ remote_docker_container_path }}/scripts
        ./start-all.sh
      become_user: ubuntu
      register: start_script_output
      args:
        chdir: "{{ remote_docker_container_path }}/scripts"
        executable: /bin/bash