#!/bin/bash

CONFLUENT_HOME="/engn/confluent"
SERVER_NAME="conn2"
PROPERTIES_FILE="${CONFLUENT_HOME}/properties/connect-avro-distributed.properties"

LOG_DIR="/logs/connect-worker"
export LOG_DIR

### java home
export JAVA_HOME="/home/ubuntu/jdk-17.0.8+7"

######################################################################

### memory options
KAFKA_HEAP_OPTS="${KAFKA_HEAP_OPTS} -Xms4G -Xmx4G"
export KAFKA_HEAP_OPTS

### performance
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -server"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:+UseG1GC"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:MaxGCPauseMillis=20"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:InitiatingHeapOccupancyPercent=35"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:+ExplicitGCInvokesConcurrent"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:MaxInlineLevel=15"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -Djava.awt.headless=true"
export KAFKA_JVM_PERFORMANCE_OPTS

### generic jvm settings
KAFKA_OPTS="${KAFKA_OPTS} -D${SERVER_NAME}"
#KAFKA_OPTS="${KAFKA_OPTS} -D${SERVER_NAME} -javaagent:${CONFLUENT_HOME}/jmx-exporter/jmx_prometheus_javaagent-0.20.0.jar=2345:${CONFLUENT_HOME}/jmx-exporter/kafka_connect.yml"
export KAFKA_OPTS

### gc option
export GC_LOG_ENABLED="true"

### jmx
#export JMX_PORT="1234"
KAFKA_JMX_OPTS="${KAFKA_JMX_OPTS} -Dcom.sun.management.jmxremote"
KAFKA_JMX_OPTS="${KAFKA_JMX_OPTS} -Dcom.sun.management.jmxremote.authenticate=false"
KAFKA_JMX_OPTS="${KAFKA_JMX_OPTS} -Dcom.sun.management.jmxremote.ssl=false "
export KAFKA_JMX_OPTS

### log4j
KAFKA_LOG4J_OPTS="${KAFKA_LOG4J_OPTS} -Dlog4j.configuration=file:${CONFLUENT_HOME}/properties/connect-worker-log4j.properties"
export KAFKA_LOG4J_OPTS

### classpath
CLASSPATH="${CLASSPATH}:${CONFLUENT_HOME}/share/java/kafka-connect-replicator/*"
export CLASSPATH

### check current user
#CURRENT_USER="$(id -un)"
#if [ "${CURRENT_USER}" == "root" ]; then
#    echo "[ERROR] The current user is root!"
#    exit
#fi

### check running process
PID="$(pgrep -xa java | grep ${PROPERTIES_FILE} | grep ${SERVER_NAME} | awk '{print $1}')"
if [ -n "${PID}" ]; then
    echo "[ERROR] The ${SERVER_NAME} (pid ${PID}) is already running!"
    exit
fi

### create log dir
if [ ! -d "${LOG_DIR}" ]; then
    mkdir -p ${LOG_DIR}
fi

nohup ${CONFLUENT_HOME}/bin/connect-distributed ${PROPERTIES_FILE} 1>/dev/null  2>&1 &
